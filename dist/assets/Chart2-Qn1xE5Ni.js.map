{"version":3,"file":"Chart2-Qn1xE5Ni.js","sources":["../../src/script.js"],"sourcesContent":["import './style.css'\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\nimport gsap  from 'gsap'\nimport * as dat from 'dat.gui';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js'\nimport {DRACOLoader} from 'three/examples/jsm/loaders/DRACOLoader.js'\n\n\n\n// Debug\n\nconst debugObject = {}\nconst gltfLoader = new GLTFLoader()\n\nconst canvas = document.querySelector('canvas.webgl')\n\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\n\nconst cursor = {\n    x: 0,\n    y: 0\n}\n\nwindow.addEventListener('mousemove', (event) => {\n    \n    cursor.x = event.clientX / sizes.width - 0.5\n    cursor.y = -(event.clientY / sizes.height - 0.5)\n\n    \n    console.log(cursor.x, cursor.y)\n    console.log(event.clientX, event.clientY)\n})\n\nwindow.addEventListener('resize', () => {\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    camera.aspect  = sizes.width/sizes.height\n    camera.updateProjectionMatrix()\n\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n})\n\n\nconst scene = new THREE.Scene()\n  \n\nfunction loadGLBModel(url, position, scale) {\n    const loader = new GLTFLoader();\n\n    loader.load(url, function (gltf) {\n        const model = gltf.scene;\n        console.log(model)\n        // Position and scale the model\n        model.position.set(position.x, position.y, position.z);\n        model.scale.set(scale, scale, scale);\n\n        // Traverse the model and apply materials without overriding\n        model.traverse(function (child) {\n            if (child.isMesh) {\n                // Ensure the model's materials are correctly applied\n                child.material = child.material || new THREE.MeshBasicMaterial();\n            }\n\n        });\n        // Add the model to the scene\n        scene.add(model);\n        \n        window.addEventListener('click', onMouseClick, false);\n        function onMouseClick(event) {\n          // Normalize mouse coordinates to range [-1, 1]\n          mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n          mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n            \n          // Update the raycaster with the mouse coordinates\n          raycaster.setFromCamera(mouse, camera);\n            \n          // Check for intersections with the icons\n          const intersects = raycaster.intersectObjects(plane.children);\n        \n          if (intersects.length > 0) {\n            const clickedObject = intersects[0].object;\n        \n            // Handle actions based on the clicked icon\n            if (clickedObject === minimizePlane || clickedObject === minimizeBackground) {\n              console.log('Minimize clicked');\n              // Implement minimize logic (e.g., hide or reduce size of plane)\n              model.scale.set(0, 0, 0);\n\n            } else if (clickedObject === maximizePlane || clickedObject === maximizeBackground) {\n              console.log('Maximize clicked');\n              // Implement maximize logic (e.g., restore plane to original size)\n              model.scale.set(5, 5, 5);\n            } else if (clickedObject === closePlane || clickedObject === closeBackground) {\n              console.log('Close clicked'); \n              // Implement close logic (e.g., remove the plane from the scene)\n              scene.remove(model);\n            }\n          }\n        }\n        \n    }, undefined, function (error) {\n        console.error('An error happened while loading the GLB model:', error);\n    });\n}\n\n\n// Function to add text in the center\nfunction addCenterText(text, color, position) {\n    const loader = new FontLoader();\n\n    // Load a font\n    loader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', function (font) {\n        const textGeometry = new TextGeometry(text, {\n            font: font,\n            size: 1.5, // Font size\n            height: 0.1, // Font thickness\n            curveSegments: 12,\n            bevelEnabled: false,\n        });\n\n        const textMaterial = new THREE.MeshStandardMaterial({ color: color });\n        const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n        // Position the text at the center of the pie chart\n        textMesh.position.set(position.x, position.y, position.z);\n        textMesh.rotation.x = Math.PI * 2; // Align flat to face camera\n        textMesh.rotation.y = Math.PI * 0.25;\n\n        window.addEventListener('click', onMouseClick, false);\n        function onMouseClick(event) {\n          // Normalize mouse coordinates to range [-1, 1]\n          mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n          mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n            \n          // Update the raycaster with the mouse coordinates\n          raycaster.setFromCamera(mouse, camera);\n            \n          // Check for intersections with the icons\n          const intersects = raycaster.intersectObjects(plane.children);\n        \n          if (intersects.length > 0) {\n            const clickedObject = intersects[0].object;\n            console.log(\"Intersects: \", intersects[0].object)\n        \n            // Handle actions based on the clicked icon\n            if (clickedObject === minimizePlane || clickedObject === minimizeBackground) {\n              console.log('Minimize clicked');\n              // Implement minimize logic (e.g., hide or reduce size of plane)\n              textMesh.scale.set(0, 0, 0);\n\n            } else if (clickedObject === maximizePlane || clickedObject === maximizeBackground) {\n              console.log('Maximize clicked');\n              // Implement maximize logic (e.g., restore plane to original size)\n              textMesh.scale.set(1, 1, 1);\n            } else if (clickedObject === closePlane || clickedObject === closeBackground) {\n              console.log('Close clicked');\n              // Implement close logic (e.g., remove the plane from the scene)\n              scene.remove(textMesh);\n            }\n          }\n        }\n\n        scene.add(textMesh);\n    });\n}\n\n\n\nfunction createCurve(controlPoints, color, scene) {\n    // Create the curve using the provided control points\n    const curve = new THREE.CubicBezierCurve3(\n        new THREE.Vector3(...controlPoints[0]),\n        new THREE.Vector3(...controlPoints[1]),\n        new THREE.Vector3(...controlPoints[2]),\n        new THREE.Vector3(...controlPoints[3])\n    );\n\n    // Generate points along the curve\n    const points = curve.getPoints(50);\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n\n    // Create the material for the curve\n    const material = new THREE.LineBasicMaterial({ color });\n\n    // Create the final curve object and add it to the scene\n    const curveObject = new THREE.Line(geometry, material);\n    scene.add(curveObject);\n\n    // Add a point (sphere) at the start of the curve\n    const startPointGeometry = new THREE.SphereGeometry(0.08, 16, 16); // Small sphere\n    const startPointMaterial = new THREE.MeshBasicMaterial({ color: color });\n    const startPoint = new THREE.Mesh(startPointGeometry, startPointMaterial);\n    \n    // Set the position of the sphere relative to the curve\n    const startPosition = curve.getPoint(0); // Point at t = 0\n    startPoint.position.copy(startPosition);\n    \n    // Make the start point a child of the curve object\n    curveObject.add(startPoint);\n\n    window.addEventListener('click', onMouseClick, false);\n    function onMouseClick(event) {\n        // Normalize mouse coordinates to range [-1, 1]\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n          \n        // Update the raycaster with the mouse coordinates\n        raycaster.setFromCamera(mouse, camera);\n          \n        // Check for intersections with the icons\n        const intersects = raycaster.intersectObjects(plane.children);\n      \n        if (intersects.length > 0) {\n          const clickedObject = intersects[0].object;\n      \n          // Handle actions based on the clicked icon\n          if (clickedObject === minimizePlane || clickedObject === minimizeBackground) {\n            console.log('Minimize clicked');\n            // Implement minimize logic (e.g., hide or reduce size of plane)\n            curveObject.scale.set(0, 0, 0);\n\n          } else if (clickedObject === maximizePlane || clickedObject === maximizeBackground) {\n            console.log('Maximize clicked');\n            // Implement maximize logic (e.g., restore plane to original size)\n            curveObject.scale.set(1, 1, 1);\n          } else if (clickedObject === closePlane || clickedObject === closeBackground) {\n            console.log('Close clicked');\n            // Implement close logic (e.g., remove the plane from the scene)\n            scene.remove(curveObject);\n          }\n        }\n      }\n\n    return curveObject; // Return the created curve object for further use\n}\n\n// Purple curve\ncreateCurve(\n    [\n        [10, -5, 0],\n        [10, -6, 0],\n        [10, -6.5, -0.5],\n        [18, -3, -0.5],\n    ],\n    '#7c05b4',\n    scene\n);\n\n// Grey curve\ncreateCurve(\n    [\n        [-15, 2.8, 2.5],\n        [-15, 4.5, 2.5],\n        [-15, 5.5, 5],\n        [-17, 4.8, 8],\n    ],\n    '#54c0b7',\n    scene\n);\n\nconst outerCurveUpper = createCurve(\n    [\n        [0, 6.75, 11],\n        [0, 6.75, 13],\n        [0, 6.70, 13],\n        [0, 0.5, 13],\n    ],\n    '#4AA19D',\n    scene\n);\n\nconst outerCurveLower =createCurve(\n    [\n        [0, -1., 11],\n        [0, -1., 13],\n        [0, -0.5, 13],\n        [0, 1.5, 13],\n    ],\n    '#4AA19D',\n    scene\n);\n\nconst outerCurveUpperChild = createCurve(\n    [\n        [0, 1.5, 10],\n        [0, 1.5, 10.75],\n        [0, 1.0, 10.75],\n        [0, -1.0, 10.75],\n    ],\n    '#4AA19D',\n    scene\n);\n\nconst outerCurveLowerChild = createCurve(\n    [\n        [0, -3.0, 10],\n        [0, -3.0, 10.75],\n        [0, -2.5, 10.75],\n        [0, -1.0, 10.75],\n    ],\n    '#4AA19D',\n    scene\n);\n\nconst outerCurveUpperRight = createCurve(\n    [\n        [0, 7.6, -13.8],\n        [0, 7.6, -16.8],\n        [0, 7.55, -16.8],\n        [0, 0.5, -16.8],\n    ],\n    '#4AA19D',\n    scene\n);\n\nconst outerCurveLowerRight =createCurve(\n    [\n        [0, -2.5, -14.4],\n        [0, -2.8, -16.8],\n        [0, -2.0, -16.8],\n        [0, 1.4, -16.8],\n    ],\n    '#4AA19D',\n    scene\n);\n\ncreateCurve(\n    [\n        [0, 1.5, -12.2],\n        [0, 1.5, -13.8],\n        [0, 1.0, -13.8],\n        [0, -1.0, -13.8],\n    ],\n    '#4AA19D',\n    scene\n);\n\ncreateCurve(\n    [\n        [0, -5.2, -12.2],\n        [0, -5.5, -13.8],\n        [0, -5.0, -13.8],\n        [0, 0.0, -13.8],\n    ],\n    '#4AA19D',\n    scene\n);\n\nfunction createRoundedRectangleWithText({\n    width,\n    height,\n    radius,\n    color,\n    text,\n    textColor,\n    textSize,\n    textPosition = { x: 0, y: 0, z: 0 },\n    depth = 0.1,\n    position = { x: 0, y: 0, z: 0 },\n    rotation = { x: 0, y: 0, z: 0 },\n}) {\n    // Step 1: Create the rounded rectangle shape\n    const shape = new THREE.Shape();\n    shape.moveTo(-width / 2 + radius, height / 2);\n    shape.lineTo(width / 2 - radius, height / 2); // Top edge\n    shape.quadraticCurveTo(width / 2, height / 2, width / 2, height / 2 - radius); // Top-right corner\n    shape.lineTo(width / 2, -height / 2 + radius); // Right edge\n    shape.quadraticCurveTo(width / 2, -height / 2, width / 2 - radius, -height / 2); // Bottom-right corner\n    shape.lineTo(-width / 2 + radius, -height / 2); // Bottom edge\n    shape.quadraticCurveTo(-width / 2, -height / 2, -width / 2, -height / 2 + radius); // Bottom-left corner\n    shape.lineTo(-width / 2, height / 2 - radius); // Left edge\n    shape.quadraticCurveTo(-width / 2, height / 2, -width / 2 + radius, height / 2); // Top-left corner\n\n    // Step 2: Extrude the shape to make it 3D\n    const geometry = new THREE.ExtrudeGeometry(shape, {\n        depth: depth,\n        bevelEnabled: false,\n    });\n    const material = new THREE.MeshPhongMaterial({ color, side: THREE.DoubleSide });\n    const roundedRectangle = new THREE.Mesh(geometry, material);\n\n    // Set position and rotation of the rectangle\n    roundedRectangle.position.set(position.x, position.y, position.z);\n    roundedRectangle.rotation.set(rotation.x, rotation.y, rotation.z);\n\n    // Step 3: Load a font and create text geometry\n    const fontLoader = new FontLoader();\n    fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font) => {\n        const textGeometry = new TextGeometry(text, {\n            font: font,\n            size: textSize,\n            height: 0.01, // Thin text\n        });\n        const textMaterial = new THREE.MeshBasicMaterial({ color: textColor });\n        const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n        // Position the text\n        textMesh.position.set(textPosition.x, textPosition.y, textPosition.z);\n        roundedRectangle.add(textMesh); // Attach text to the rectangle\n    });\n    \n    scene.add(roundedRectangle);\n\n    window.addEventListener('click', onMouseClick, false);\n    \n    function onMouseClick(event) {\n        // Normalize mouse coordinates to range [-1, 1]\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n          \n        // Update the raycaster with the mouse coordinates\n        raycaster.setFromCamera(mouse, camera);\n          \n        // Check for intersections with the icons\n        const intersects = raycaster.intersectObjects(plane.children);\n        \n        if (intersects.length > 0) {\n            document.body.style.cursor = 'pointer'; // Change to pointer\n          } else {\n            document.body.style.cursor = 'default'; // Revert to default\n          }\n\n        if (intersects.length > 0) {\n          const clickedObject = intersects[0].object;        \n          // Handle actions based on the clicked icon\n          if (clickedObject === minimizePlane || clickedObject === minimizeBackground) {\n            console.log('Minimize clicked');\n            // Implement minimize logic (e.g., hide or reduce size of plane)\n            \n            roundedRectangle.scale.set(0,0,0)\n\n          } else if (clickedObject === maximizePlane || clickedObject === maximizeBackground) {\n            console.log('Maximize clicked');\n\n            roundedRectangle.scale.set(1,1,1)    \n            \n        } else if (clickedObject === closePlane || clickedObject === closeBackground) {\n            console.log('Close clicked');\n            // Implement close logic (e.g., remove the plane from the scene)\n            scene.remove(roundedRectangle);\n          }\n        }\n      }\n    \n    return roundedRectangle;\n}\n// Create \"75% User\" Rounded Rectangle\nconst roundedRect = createRoundedRectangleWithText({\n    width: 2,\n    height: 0.6,\n    radius: 0.3,\n    color: \"#7c05b4\", // Red\n    text: \"75% User\",\n    textColor: 0xffffff, // White\n    textSize: 0.28,\n    textPosition: { x: -0.88, y: 0.08, z: 0.5 }, // Position of text relative to the rectangle\n    position: { x: 18, y: -3.1, z: 0.5 }, // Position of rectangle in the scene\n    rotation: { x: 0, y: Math.PI * 0.35, z: 0 }, // Rotation of rectangle\n});\n\nconst greyRoundedRect = createRoundedRectangleWithText({\n    width: 6,\n    height: 1.5,\n    radius: 0.7,\n    color: \"#54c0b7\", // Grey color\n    text: \"25% User\",\n    textColor: 0xffffff, // White\n    textSize: 0.8,\n    textPosition: { x: -2.2, y: -0.3, z: 0.5 },\n    position: { x: -16, y: 4.8, z: 9.5 },\n    rotation: { x: 0, y: Math.PI * 0.35, z: 0 },\n});\n\n\n// Create the base plane\nconst planeGeometry = new THREE.PlaneGeometry(22, 2);\nconst planeMaterial = new THREE.MeshBasicMaterial({ color: \"#004d69\", side: THREE.DoubleSide, transparent: true });\nconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\nplane.rotation.y = Math.PI * 0.4;\nplane.position.y = 7.2;\nscene.add(plane);\n\n// Create a canvas for text\nconst textCanvas = document.createElement('canvas');\ntextCanvas.width = 1024; // Canvas resolution\ntextCanvas.height = 256;\nconst context = textCanvas.getContext('2d');\n\n// Add a white rectangle as the background for the text\ncontext.fillStyle = '#19dcdb'; // Background color\nconst margin = 1; // Margin around the text\nconst rectWidth = textCanvas.width - 2 * margin;\nconst rectHeight = textCanvas.height - 2 * margin;\ncontext.fillRect(margin, margin, rectWidth, rectHeight); // Fill the rectangle\n\n// Add text to the rectangle\ncontext.font = 'bold 120px Sans'; // Font size and style\ncontext.fillStyle = 'black'; // Text color\ncontext.textAlign = 'left';\ncontext.textBaseline = 'middle';\ncontext.fillText('TOTAL USERS', margin + 20, textCanvas.height / 2); // Add text with margin\n\n// Create a texture from the canvas\nconst textTexture = new THREE.CanvasTexture(textCanvas);\n\n// Create a material with the texture\nconst textMaterial = new THREE.MeshBasicMaterial({ map: textTexture, transparent: true });\n\n// Create a new plane to hold the text\nconst textPlaneGeometry = new THREE.PlaneGeometry(8, 1.5); // Adjust size to fit text and leave margins\nconst textPlane = new THREE.Mesh(textPlaneGeometry, textMaterial);\n\n// Position the text plane inside the main plane with margin\ntextPlane.position.set(-6.5, 0, 0.01); // Offset slightly in Z to avoid z-fighting\nplane.add(textPlane); // Attach the text plane to the main plane\n\nconst iconBackgroundMaterial = new THREE.MeshBasicMaterial({ color: \"#19dcdb\", transparent: true, opacity: 1 });\n\n\n// Load icon textures (replace with your actual icon image paths)\nconst iconLoader = new THREE.TextureLoader();\nconst minimizeIcon = iconLoader.load('./minimize-sign.png');\nconst maximizeIcon = iconLoader.load('./maximize.png');\nconst closeIcon = iconLoader.load('./close.png');\n// Create materials for the icons\nconst minimizeMaterial = new THREE.MeshBasicMaterial({ map: minimizeIcon, transparent: true });\nconst maximizeMaterial = new THREE.MeshBasicMaterial({ map: maximizeIcon, transparent: true });\nconst closeMaterial = new THREE.MeshBasicMaterial({ map: closeIcon, transparent: true });\n\n// Create planes for the icons inside the main plane\nconst iconSize = 1.2;\nconst iconBackgroundSize = 1.6; // Adjust size of icons\n\nconst minimizeBackground = new THREE.Mesh(new THREE.PlaneGeometry(iconBackgroundSize, iconBackgroundSize), iconBackgroundMaterial);\nminimizeBackground.position.set(5.75, 0.02, 0.02); // Position behind minimize icon\nplane.add(minimizeBackground);\n\nconst maximizeBackground = new THREE.Mesh(new THREE.PlaneGeometry(iconBackgroundSize, iconBackgroundSize), iconBackgroundMaterial);\nmaximizeBackground.position.set(7.75, 0.02, 0.02); // Position behind maximize icon\nplane.add(maximizeBackground);\n\nconst closeBackground = new THREE.Mesh(new THREE.PlaneGeometry(iconBackgroundSize, iconBackgroundSize), iconBackgroundMaterial);\ncloseBackground.position.set(9.75, 0.02, 0.02); // Position behind close icon\nplane.add(closeBackground);\n\nconst minimizePlane = new THREE.Mesh(new THREE.PlaneGeometry(iconSize, iconSize), minimizeMaterial);\nminimizePlane.position.set(5.75, 0.1, 0.04); // Adjust the position of the minimize icon inside the main plane\nplane.add(minimizePlane);\n\nconst maximizePlane = new THREE.Mesh(new THREE.PlaneGeometry(iconSize, iconSize), maximizeMaterial);\nmaximizePlane.position.set(7.75, 0.1, 0.04); // Position maximize icon\nplane.add(maximizePlane);\n\nconst closePlane = new THREE.Mesh(new THREE.PlaneGeometry(iconSize, iconSize), closeMaterial);\nclosePlane.position.set(9.75, 0.1, 0.04); // Position close icon\nplane.add(closePlane);\n\n\n\n// Load the GLB model for the pie chart segments\nloadGLBModel('./1PieChart.glb', new THREE.Vector3(0, 0, 0), 5);\n\naddCenterText(\"75%\", 0xffffff, new THREE.Vector3(2, -2.25, 1.75)); // Slight offset adjustment\n\nconst bgGeometry = new THREE.PlaneGeometry(40, 25);\nconst bgMaterial = new THREE.MeshBasicMaterial({\n  color: \"#26336B\", // Set the background color (green in this case)\n  side: THREE.DoubleSide,\n  transparent: true, // Enable transparency\n  opacity: 0.3, // Adjust opacity (1.0 is fully opaque, 0 is fully transparent)\n});\nconst bgPlane = new THREE.Mesh(bgGeometry, bgMaterial);\nbgPlane.rotation.y = Math.PI * 0.4;\nbgPlane.position.z = 0.0;\nbgPlane.position.y = -2.0;\nbgPlane.position.x = -6.;\nscene.add(bgPlane);\n\nconst ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 1);\ndirectionalLight.position.set(10, 10, 10);\nscene.add(ambientLight, directionalLight);\n\n\n\nconst camera = new THREE.PerspectiveCamera(75, sizes.width/sizes.height)\ncamera.position.set(30.93563109244617, 2.581085025998235, 9.102246280191748);\ncamera.lookAt(0, 0, 0);\nscene.add(camera)\n\nconst controls = new OrbitControls(camera, canvas)\n// // controls.enabled= false\ncontrols.enableDamping = true\ncontrols.enableZoom = false;  // Disable zoom\ncontrols.enablePan = false;   // Disable panning\ncontrols.enableRotate = false; // Disable rotation\n\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n})\nrenderer.setSize(sizes.width, sizes.height)\n\n// To remove blurry pixel\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio,2))\n\n\nconst clock = new THREE.Clock()\n\nconst tick = ()  => {\n    const elapsedTime = clock.getElapsedTime()\n    //controls.update()\n\n    renderer.render(scene,camera)\n    window.requestAnimationFrame(tick)\n\n\n}\n\ntick()\n\n\n"],"names":["GLTFLoader","canvas","sizes","raycaster","THREE.Raycaster","mouse","THREE.Vector2","cursor","event","camera","renderer","scene","THREE.Scene","loadGLBModel","url","position","scale","gltf","model","child","THREE.MeshBasicMaterial","onMouseClick","intersects","plane","clickedObject","minimizePlane","minimizeBackground","maximizePlane","maximizeBackground","closePlane","closeBackground","error","addCenterText","text","color","FontLoader","font","textGeometry","TextGeometry","textMaterial","THREE.MeshStandardMaterial","textMesh","THREE.Mesh","createCurve","controlPoints","curve","THREE.CubicBezierCurve3","THREE.Vector3","points","geometry","THREE.BufferGeometry","material","THREE.LineBasicMaterial","curveObject","THREE.Line","startPointGeometry","THREE.SphereGeometry","startPointMaterial","startPoint","startPosition","createRoundedRectangleWithText","width","height","radius","textColor","textSize","textPosition","depth","rotation","shape","THREE.Shape","THREE.ExtrudeGeometry","THREE.MeshPhongMaterial","THREE.DoubleSide","roundedRectangle","planeGeometry","THREE.PlaneGeometry","planeMaterial","textCanvas","context","margin","rectWidth","rectHeight","textTexture","THREE.CanvasTexture","textPlaneGeometry","textPlane","iconBackgroundMaterial","iconLoader","THREE.TextureLoader","minimizeIcon","maximizeIcon","closeIcon","minimizeMaterial","maximizeMaterial","closeMaterial","iconSize","iconBackgroundSize","bgGeometry","bgMaterial","bgPlane","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","clock","THREE.Clock","tick"],"mappings":"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"}