{"version":3,"file":"Chart1-PC0_1KfX.js","sources":["../../src/pieChartMain.js"],"sourcesContent":["import './style.css'\nimport * as THREE from 'three'\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js'\nimport gsap  from 'gsap'\nimport * as dat from 'dat.gui';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry.js';\nimport {GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js'\nimport {DRACOLoader} from 'three/examples/jsm/loaders/DRACOLoader.js'\n\n\n\n// Debug\n\nconst debugObject = {}\nconst gltfLoader = new GLTFLoader()\n\nconst canvas = document.querySelector('canvas.webgl')\n// const nav = document.querySelector('nav');\n//const navHeight = nav.offsetHeight;\nconst sizes = {\n    width: window.innerWidth,\n    height: window.innerHeight\n}\n\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\n\nconst cursor = {\n    x: 0,\n    y: 0\n}\n\nwindow.addEventListener('mousemove', (event) => {\n    \n    cursor.x = event.clientX / sizes.width - 0.5\n    cursor.y = -(event.clientY / sizes.height - 0.5)\n\n    \n    // console.log(cursor.x, cursor.y)\n    // console.log(event.clientX, event.clientY)\n})\n\nwindow.addEventListener('resize', () => {\n    sizes.width = window.innerWidth\n    sizes.height = window.innerHeight\n\n    camera.aspect  = sizes.width/sizes.height\n    camera.updateProjectionMatrix()\n\n    renderer.setSize(sizes.width, sizes.height)\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\n})\n\nconst scene = new THREE.Scene()\n  \n\nfunction loadGLBModel(url, position, scale) {\n    const loader = new GLTFLoader();\n\n    loader.load(url, function (gltf) {\n        const model = gltf.scene;\n        console.log(model)\n        // Position and scale the model\n        model.position.set(position.x, position.y, position.z);\n        model.scale.set(scale, scale, scale);\n\n        // Traverse the model and apply materials without overriding\n        model.traverse(function (child) {\n            if (child.isMesh) {\n                // Ensure the model's materials are correctly applied\n                child.material = child.material || new THREE.MeshBasicMaterial();\n            }\n\n        });\n        // Add the model to the scene\n        scene.add(model);\n        \n        window.addEventListener('click', onMouseClick, false);\n        function onMouseClick(event) {\n            // Normalize mouse coordinates to range [-1, 1]\n            mouse.x = (event.clientX / sizes.width) * 2 - 1;\n            mouse.y = -(event.clientY / sizes.height) * 2 + 1;\n              \n            // Update the raycaster with the mouse coordinates\n            raycaster.setFromCamera(mouse, camera);\n              \n            // Check for intersections with the icons\n            const intersects = raycaster.intersectObjects(plane.children);\n            console.log(\"Intersects: \", intersects)\n            if (intersects.length > 0) {\n              const clickedObject = intersects[0].object ;\n              console.log(clickedObject)\n          \n              // Handle actions based on the clicked icon\n              if (clickedObject === minimizePlane || clickedObject === minimizeBackground ) {\n                console.log('Minimize clicked');\n                // Implement minimize logic (e.g., hide or reduce size of plane)\n                model.scale.set(0, 0, 0);\n    \n              } else if (clickedObject === maximizePlane || clickedObject === maximizeBackground ) {\n                console.log('Maximize clicked');\n                // Implement maximize logic (e.g., restore plane to original size)\n                model.scale.set(5, 5, 5);\n              } else if (clickedObject === closePlane || clickedObject === closeBackground) {\n                console.log('Close clicked');\n                // Implement close logic (e.g., remove the plane from the scene)\n                scene.remove(model);\n              }\n            }\n        }        \n        return model\n    }, undefined, function (error) {\n        console.error('An error happened while loading the GLB model:', error);\n    });\n}\n\n// Load the GLB model for the pie chart segments\nconst piechart = loadGLBModel('Pie Chart .glb', new THREE.Vector3(0, 0, 0), 5);\n\n\n\nfunction createCurve(controlPoints, color, scene) {\n    // Create the curve using the provided control points\n    const curve = new THREE.CubicBezierCurve3(\n        new THREE.Vector3(...controlPoints[0]),\n        new THREE.Vector3(...controlPoints[1]),\n        new THREE.Vector3(...controlPoints[2]),\n        new THREE.Vector3(...controlPoints[3])\n    );\n\n    // Generate points along the curve\n    const points = curve.getPoints(50);\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n\n    // Create the material for the curve\n    const material = new THREE.LineBasicMaterial({ color });\n\n    // Create the final curve object and add it to the scene\n    const curveObject = new THREE.Line(geometry, material);\n    scene.add(curveObject);\n\n    // Add a point (sphere) at the start of the curve\n    const startPointGeometry = new THREE.SphereGeometry(0.08, 16, 16); // Small sphere\n    const startPointMaterial = new THREE.MeshBasicMaterial({ color: color });\n    const startPoint = new THREE.Mesh(startPointGeometry, startPointMaterial);\n\n    // Set the position of the sphere relative to the curve\n    const startPosition = curve.getPoint(0); // Point at t = 0\n    startPoint.position.copy(startPosition);\n\n    // Make the start point a child of the curve object\n    curveObject.add(startPoint);\n    \n\n    window.addEventListener('click', onMouseClick, false);\n    function onMouseClick(event) {\n        // Normalize mouse coordinates to range [-1, 1]\n        mouse.x = (event.clientX / sizes.width) * 2 - 1;\n        mouse.y = -(event.clientY / sizes.height) * 2 + 1;\n          \n        // Update the raycaster with the mouse coordinates\n        raycaster.setFromCamera(mouse, camera);\n          \n        // Check for intersections with the icons\n        const intersects = raycaster.intersectObjects(plane.children);\n      \n        if (intersects.length > 0) {\n          const clickedObject = intersects[0].object ;\n          console.log(clickedObject)\n      \n          // Handle actions based on the clicked icon\n          if (clickedObject === minimizePlane || clickedObject === minimizeBackground ) {\n            console.log('Minimize clicked');\n            // Implement minimize logic (e.g., hide or reduce size of plane)\n            curveObject.scale.set(0, 0, 0);\n\n          } else if (clickedObject === maximizePlane || clickedObject === maximizeBackground) {\n            console.log('Maximize clicked');\n            // Implement maximize logic (e.g., restore plane to original size)\n            curveObject.scale.set(1, 1, 1);\n          } else if (clickedObject === closePlane || clickedObject === closeBackground) {\n            console.log('Close clicked');\n            // Implement close logic (e.g., remove the plane from the scene)\n            scene.remove(curveObject);\n          }\n        }\n      }\n\n    return curveObject; // Return the created curve object for further use\n}\n\n// Example usage:\n\n// Purple curve\ncreateCurve(\n    [\n        [10, -4, 0],\n        [10, -6, 0],\n        [10, -6.5, -0.5],\n        [17, -3.7, -0.1],\n    ],\n    '#7c05b4',\n    scene\n);\n\n// Grey curve\ncreateCurve(\n    [\n        [0, 3.0, 6.0],\n        [10, 3.5,7.0],\n        [10, 3.7, 7.0],\n        [0, 4., 9.0],\n    ],\n    '#54c0b7',\n    scene\n);\n\n// Orange curve\nconst orange = createCurve(\n    [\n        [12.5, -3.3, -0.4],\n        [10, -4.5, 0],\n        [10, -4.9, -1],\n        [17, -5.5, -0],\n    ],\n    '#B16D1F',\n    scene\n);\norange.position.x = -8\norange.position.y = -0.5\norange.rotation.x = Math.PI * 0.75\n\n// Red Curve\nconst red = createCurve(\n    [\n        [10, -4.0, 0],\n        [5, -6, 0],\n        [10, -6, -1],\n        [15, -6.1, -0],\n    ],\n    '#A8192A',\n    scene\n);\nred.position.z = 6.75\nred.position.y = 0.6\nred.position.x = 0\nred.rotation.x = Math.PI * 0.75\n\nconst maroon = createCurve(\n    [\n        [5,-3.2, 6],\n        [5,-5,6],\n        [5,-5,7],\n        [5, -4.7, 9],\n    ],\n    '#178ce5',\n    scene\n);\n\nconst outerCurveUpper = createCurve(\n    [\n        [0, 9.5, 12],\n        [0, 9.5, 15],\n        [0, 7.5, 15],\n        [0, 1.5, 15],\n    ],\n    '#4AA19D',\n    scene\n);\n\nconst outerCurveLower =createCurve(\n    [\n        [0, -0.5, 12],\n        [0, -0.5, 15],\n        [0, 1.5, 15],\n        [0, 1.5, 15],\n    ],\n    '#4AA19D',\n    scene\n);\n\ncreateCurve(\n    [\n        [0, 1.5, 11],\n        [0, 1.5, 11.75],\n        [0, 1.0, 11.75],\n        [0, -1.0, 11.75],\n    ],\n    '#4AA19D',\n    scene\n);\n\ncreateCurve(\n    [\n        [0, -3.0, 11],\n        [0, -3.0, 11.75],\n        [0, -2.5, 11.75],\n        [0, -1.0, 11.75],\n    ],\n    '#4AA19D',\n    scene\n);\n\nfunction createRoundedRectangleWithText({\n    width,\n    height,\n    radius,\n    color,\n    text,\n    textColor,\n    textSize,\n    textPosition = { x: 0, y: 0, z: 0 },\n    depth = 0.1,\n    position = { x: 0, y: 0, z: 0 },\n    rotation = { x: 0, y: 0, z: 0 },\n}) {\n    // Step 1: Create the rounded rectangle shape\n    const shape = new THREE.Shape();\n    shape.moveTo(-width / 2 + radius, height / 2);\n    shape.lineTo(width / 2 - radius, height / 2); // Top edge\n    shape.quadraticCurveTo(width / 2, height / 2, width / 2, height / 2 - radius); // Top-right corner\n    shape.lineTo(width / 2, -height / 2 + radius); // Right edge\n    shape.quadraticCurveTo(width / 2, -height / 2, width / 2 - radius, -height / 2); // Bottom-right corner\n    shape.lineTo(-width / 2 + radius, -height / 2); // Bottom edge\n    shape.quadraticCurveTo(-width / 2, -height / 2, -width / 2, -height / 2 + radius); // Bottom-left corner\n    shape.lineTo(-width / 2, height / 2 - radius); // Left edge\n    shape.quadraticCurveTo(-width / 2, height / 2, -width / 2 + radius, height / 2); // Top-left corner\n\n    // Step 2: Extrude the shape to make it 3D\n    const geometry = new THREE.ExtrudeGeometry(shape, {\n        depth: depth,\n        bevelEnabled: false,\n    });\n    const material = new THREE.MeshPhongMaterial({ color, side: THREE.DoubleSide });\n    const roundedRectangle = new THREE.Mesh(geometry, material);\n\n    // Set position and rotation of the rectangle\n    roundedRectangle.position.set(position.x, position.y, position.z);\n    roundedRectangle.rotation.set(rotation.x, rotation.y, rotation.z);\n\n    // Step 3: Load a font and create text geometry\n    const fontLoader = new FontLoader();\n    fontLoader.load('https://threejs.org/examples/fonts/helvetiker_regular.typeface.json', (font) => {\n        const textGeometry = new TextGeometry(text, {\n            font: font,\n            size: textSize,\n            height: 0.01, // Thin text\n        });\n        const textMaterial = new THREE.MeshBasicMaterial({ color: textColor });\n        const textMesh = new THREE.Mesh(textGeometry, textMaterial);\n\n        // Position the text\n        textMesh.position.set(textPosition.x, textPosition.y, textPosition.z);\n        roundedRectangle.add(textMesh); // Attach text to the rectangle\n    });\n    \n    scene.add(roundedRectangle);\n\n    window.addEventListener('click', onMouseClick, false);\n    function onMouseClick(event) {\n        // Normalize mouse coordinates to range [-1, 1]\n        mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n        mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n          \n        // Update the raycaster with the mouse coordinates\n        raycaster.setFromCamera(mouse, camera);\n          \n        // Check for intersections with the icons\n        const intersects = raycaster.intersectObjects(plane.children);\n      \n        if (intersects.length > 0) {\n          const clickedObject = intersects[0].object;\n      \n          // Handle actions based on the clicked icon\n          if (clickedObject === minimizeBackground || clickedObject === minimizePlane) {\n            console.log('Minimize clicked');\n            // Implement minimize logic (e.g., hide or reduce size of plane)\n            roundedRectangle.scale.set(0, 0, 0);\n\n          } else if (clickedObject === maximizeBackground || clickedObject === maximizePlane) {\n            console.log('Maximize clicked');\n            // Implement maximize logic (e.g., restore plane to original size)\n            roundedRectangle.scale.set(1, 1, 1);\n          } else if (clickedObject === closeBackground || clickedObject === closePlane) {\n            console.log('Close clicked');\n            // Implement close logic (e.g., remove the plane from the scene)\n            scene.remove(roundedRectangle);\n          }\n        }\n      }\n    \n    return roundedRectangle;\n}\n// Create \"75% User\" Rounded Rectangle\nconst roundedRect = createRoundedRectangleWithText({\n    width: 1.8,\n    height: 0.5,\n    radius: 0.2,\n    color: \"#7c05b4\", // Red\n    text: \"75% JZX 01\",\n    textColor: 0xffffff, // White\n    textSize: 0.2,\n    textPosition: { x: -0.9, y: 0.08, z: 0.5 }, // Position of text relative to the rectangle\n    position: { x: 18, y: -3.39, z: -0.50 }, // Position of rectangle in the scene\n    rotation: { x: Math.PI * 2, y: Math.PI * 0.40, z: 0 }, // Rotation of rectangle\n});\n\nconst greyRoundedRect = createRoundedRectangleWithText({\n    width: 6,\n    height: 1.5,\n    radius: 0.7,\n    color: \"#54c0b7\", // Grey color\n    text: \"25% JZX 01\",\n    textColor: 0xffffff, // White\n    textSize: 0.7,\n    textPosition: { x: -2.4, y: -0.3, z: 0.5 },\n    position: { x: -30, y:5.25, z: 11.5 },\n    rotation: { x: 0, y: Math.PI * 0.35, z: 0 },\n});\n\nconst orangeRoundedRect = createRoundedRectangleWithText({\n    width: 1.6,\n    height: 0.5,\n    radius: 0.2,\n    color: \"#B16D1F\", // Grey color 17, -5.7, -0.5\n    text: \"40% JZX 01\",\n    textColor: 0xffffff, // White\n    textSize: 0.18,\n    textPosition: { x: -0.74, y: -0.1, z: 0.5 }, // Position of text relative to the rectangle\n    position: { x: 16, y: 3.08, z: 0.45 },\n    rotation: { x: 0, y: Math.PI * 0.35, z: 0 },\n});\n\nconst redRoundedRect = createRoundedRectangleWithText({\n    width:1.4,\n    height: 0.4,\n    radius: 0.2,\n    color: \"#A8192A\", // Grey color 17, -5.7, -0.5\n    text: \"10% JZX 01\",\n    textColor: 0xffffff, // White\n    textSize: 0.16,\n    textPosition: { x: -0.6, y: -0.15, z: 0.5 }, // Position of text relative to the rectangle\n    position: { x: 18, y: 4.55, z: 2.9 },\n    rotation: { x: 0, y: Math.PI * 0.35, z: 0 },\n});\n\nconst maroonRoundedRect = createRoundedRectangleWithText({\n    width: 3.6,\n    height: 0.8,\n    radius: 0.3,\n    color: \"#176ce5\", // maroon\n    text: \"10% JZX 01\",\n    textColor: 0xffffff, // White\n    textSize: 0.4,\n    textPosition: { x: -1.2, y: 0.0, z: 0.6 }, // Position of text relative to the rectangle\n    position: { x: 5, y: -4.58, z: 9.5 }, // Position of rectangle in the scene\n    rotation: { x: 0, y: Math.PI * 0.35, z: 0 }, // Rotation of rectangle  5, -4.5, 10\n});\n\n// Create the base plane\nconst planeGeometry = new THREE.PlaneGeometry(25, 2.5);\nconst planeMaterial = new THREE.MeshBasicMaterial({ color: \"#004d69\", side: THREE.DoubleSide, transparent: true });\nconst plane = new THREE.Mesh(planeGeometry, planeMaterial);\nplane.rotation.y = Math.PI * 0.4;\nplane.position.y = 10.2;\nscene.add(plane);\n\n// Create a canvas for text\nconst textCanvas = document.createElement('canvas');\ntextCanvas.width = 1093; // Canvas resolution\ntextCanvas.height = 256;\nconst context = textCanvas.getContext('2d');\n\n// Add a white rectangle as the background for the text\ncontext.fillStyle = '#19dcdb'; // Background color\nconst margin = 1; // Margin around the text\nconst rectWidth = textCanvas.width - 2 * margin;\nconst rectHeight = textCanvas.height - 2 * margin;\ncontext.fillRect(margin, margin, rectWidth, rectHeight); // Fill the rectangle\n\n// Add text to the rectangle\ncontext.font = 'bold 124px Sans'; // Font size and style\ncontext.fillStyle = 'black'; // Text color\ncontext.textAlign = 'left';\ncontext.textBaseline = 'middle';\ncontext.fillText('USER ACTIVITY', margin + 20, textCanvas.height / 2); // Add text with margin\n\n// Create a texture from the canvas\nconst textTexture = new THREE.CanvasTexture(textCanvas);\n\n// Create a material with the texture\nconst textMaterial = new THREE.MeshBasicMaterial({ map: textTexture, transparent: true });\n\n// Create a new plane to hold the text\nconst textPlaneGeometry = new THREE.PlaneGeometry(8, 1.7); // Adjust size to fit text and leave margins\nconst textPlane = new THREE.Mesh(textPlaneGeometry, textMaterial);\n\n// Position the text plane inside the main plane with margin\ntextPlane.position.set(-8.0, 0, 0.01); // Offset slightly in Z to avoid z-fighting\nplane.add(textPlane); // Attach the text plane to the main plane\n\nconst iconBackgroundMaterial = new THREE.MeshBasicMaterial({ color: \"#19dcdb\", transparent: true, opacity: 1 });\n\n\n// Load icon textures (replace with your actual icon image paths)\nconst iconLoader = new THREE.TextureLoader();\nconst minimizeIcon = iconLoader.load('./minimize-sign.png');\nconst maximizeIcon = iconLoader.load('./maximize.png');\nconst closeIcon = iconLoader.load('./close.png');\n// Create materials for the icons\nconst minimizeMaterial = new THREE.MeshBasicMaterial({ map: minimizeIcon, transparent: true });\nconst maximizeMaterial = new THREE.MeshBasicMaterial({ map: maximizeIcon, transparent: true });\nconst closeMaterial = new THREE.MeshBasicMaterial({ map: closeIcon, transparent: true });\n\n// Create planes for the icons inside the main plane\nconst iconSize = 1.2;\nconst iconBackgroundSize = 1.6; // Adjust size of icons\n\nconst minimizeBackground = new THREE.Mesh(new THREE.PlaneGeometry(iconBackgroundSize, iconBackgroundSize), iconBackgroundMaterial);\nminimizeBackground.position.set(6.5, 0.02, 0.02); // Position behind minimize icon\nplane.add(minimizeBackground);\n\nconst maximizeBackground = new THREE.Mesh(new THREE.PlaneGeometry(iconBackgroundSize, iconBackgroundSize), iconBackgroundMaterial);\nmaximizeBackground.position.set(8.75, 0.02, 0.02); // Position behind maximize icon\nplane.add(maximizeBackground);\n\nconst closeBackground = new THREE.Mesh(new THREE.PlaneGeometry(iconBackgroundSize, iconBackgroundSize), iconBackgroundMaterial);\ncloseBackground.position.set(11, 0.02, 0.02); // Position behind close icon\nplane.add(closeBackground);\n\nconst minimizePlane = new THREE.Mesh(new THREE.PlaneGeometry(iconSize, iconSize), minimizeMaterial);\nminimizePlane.position.set(6.5, 0.1, 0.04); // Adjust the position of the minimize icon inside the main plane\nplane.add(minimizePlane);\n\nconst maximizePlane = new THREE.Mesh(new THREE.PlaneGeometry(iconSize, iconSize), maximizeMaterial);\nmaximizePlane.position.set(8.75, 0.1, 0.04); // Position maximize icon\nplane.add(maximizePlane);\n\nconst closePlane = new THREE.Mesh(new THREE.PlaneGeometry(iconSize, iconSize), closeMaterial);\nclosePlane.position.set(11, 0.1, 0.04); // Position close icon\nplane.add(closePlane);\n\n  const bgGeometry = new THREE.PlaneGeometry(40, 30);\n  const bgMaterial = new THREE.MeshBasicMaterial({\n    color: \"#26336B\", // Set the background color (green in this case)\n    side: THREE.DoubleSide,\n    transparent: true, // Enable transparency\n    opacity: 0.3, // Adjust opacity (1.0 is fully opaque, 0 is fully transparent)\n  });\n  const bgPlane = new THREE.Mesh(bgGeometry, bgMaterial);\n  bgPlane.rotation.y = Math.PI * 0.4;\n  bgPlane.position.z = 0.0;\n  bgPlane.position.y = 0.0;\n  bgPlane.position.x = -8.;\n  scene.add(bgPlane);\n  \n  \n  window.addEventListener('click', onMouseClick, false);\n  function onMouseClick(event) {\n      // Normalize mouse coordinates to range [-1, 1]\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n        \n      // Update the raycaster with the mouse coordinates\n      raycaster.setFromCamera(mouse, camera);\n        \n      // Check for intersections with the icons\n      const intersects = raycaster.intersectObjects(plane.children);\n\n      if (intersects.length > 0) {\n        document.body.style.cursor = 'pointer'; // Change to pointer\n      } else {\n        document.body.style.cursor = 'default'; // Revert to default\n      }\n    \n      if (intersects.length > 0) {\n        const clickedObject = intersects[0].object ;\n        console.log(clickedObject)\n    \n        // Handle actions based on the clicked icon\n        if (clickedObject === minimizeBackground || clickedObject === minimizePlane ) {\n          console.log('Minimize clicked');\n          // Implement minimize logic (e.g., hide or reduce size of plane)\n          bgPlane.scale.set(1,1,1)\n        } else if (clickedObject === maximizeBackground || clickedObject == maximizePlane) {\n          console.log('Maximize clicked');\n          // Implement maximize logic (e.g., restore plane to original size)\n          \n          bgPlane.scale.set(1., 1., 1.)\n        } else if (clickedObject === closeBackground || clickedObject == closePlane) {\n          console.log('Close clicked');\n          // Implement close logic (e.g., remove the plane from the scene)\n          scene.remove(bgPlane);\n        }\n      }\n  }      \n\nconst ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\nconst directionalLight = new THREE.DirectionalLight(0xffffff, 1);\ndirectionalLight.position.set(10, 10, 10);\nscene.add(ambientLight, directionalLight);\n\nconst camera = new THREE.PerspectiveCamera(75, sizes.width/sizes.height)\ncamera.position.set(30.93563109244617, 2.581085025998235, 9.102246280191748);\ncamera.lookAt(0, 0, 0);\nscene.add(camera)\n\n// Intersection Marker\nconst intersectionSphere = new THREE.SphereGeometry(0.1, 16, 16);\nconst intersectionMarker = new THREE.Mesh(intersectionSphere, new THREE.MeshBasicMaterial({ color: 0xff0000 }));\nscene.add(intersectionMarker);\n\n// Track mouse movement\nwindow.addEventListener('mousemove', (event) => {\n    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n});\n\n// Animation loop\nfunction animate() {\n    requestAnimationFrame(animate);\n\n    // Update raycaster\n    raycaster.setFromCamera(mouse, camera);\n\n    // Check intersections\n    const intersects = raycaster.intersectObject(minimizeBackground);\n    console.log(\"Intersect Check: \", intersects)\n    if (intersects.length > 0) {\n        intersectionMarker.position.copy(intersects[0].point);\n    }\n\n    renderer.render(scene, camera);\n}\n\n\nconst controls = new OrbitControls(camera, canvas)\n// // controls.enabled= false\ncontrols.enableDamping = true\ncontrols.enableZoom = false;  // Disable zoom\ncontrols.enablePan = false;   // Disable panning\ncontrols.enableRotate = false; // Disable rotation\n\n// Renderer\nconst renderer = new THREE.WebGLRenderer({\n    canvas: canvas,\n    antialias: true\n})\nrenderer.setSize(sizes.width, sizes.height)\n\n// To remove blurry pixel\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio,2))\n\nconst clock = new THREE.Clock()\n\nconst tick = ()  => {\n    const elapsedTime = clock.getElapsedTime()\n\n    renderer.render(scene,camera)\n    window.requestAnimationFrame(tick)\n\n\n\n}\n// animate()\ntick()"],"names":["GLTFLoader","canvas","sizes","raycaster","THREE.Raycaster","mouse","THREE.Vector2","event","camera","renderer","scene","THREE.Scene","loadGLBModel","url","position","scale","gltf","model","child","THREE.MeshBasicMaterial","onMouseClick","intersects","plane","clickedObject","minimizePlane","minimizeBackground","maximizePlane","maximizeBackground","closePlane","closeBackground","error","THREE.Vector3","createCurve","controlPoints","color","curve","THREE.CubicBezierCurve3","points","geometry","THREE.BufferGeometry","material","THREE.LineBasicMaterial","curveObject","THREE.Line","startPointGeometry","THREE.SphereGeometry","startPointMaterial","startPoint","THREE.Mesh","startPosition","orange","red","createRoundedRectangleWithText","width","height","radius","text","textColor","textSize","textPosition","depth","rotation","shape","THREE.Shape","THREE.ExtrudeGeometry","THREE.MeshPhongMaterial","THREE.DoubleSide","roundedRectangle","FontLoader","font","textGeometry","TextGeometry","textMaterial","textMesh","planeGeometry","THREE.PlaneGeometry","planeMaterial","textCanvas","context","margin","rectWidth","rectHeight","textTexture","THREE.CanvasTexture","textPlaneGeometry","textPlane","iconBackgroundMaterial","iconLoader","THREE.TextureLoader","minimizeIcon","maximizeIcon","closeIcon","minimizeMaterial","maximizeMaterial","closeMaterial","iconSize","iconBackgroundSize","bgGeometry","bgMaterial","bgPlane","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","THREE.PerspectiveCamera","intersectionSphere","intersectionMarker","controls","OrbitControls","THREE.WebGLRenderer","clock","THREE.Clock","tick"],"mappings":"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"}